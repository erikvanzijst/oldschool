/*
 * File:           ErikconfigurationParsletImpl.java
 * Date:           4 december 2003  12:16
 *
 * @author  laurence.crutcher
 * @version generated by NetBeans XML module
 */
package configuration;

import org.xml.sax.*;

public class ErikconfigurationParsletImpl implements ErikconfigurationParslet {
    
    public java.lang.String managementAgentConvertor(final java.lang.String data) throws SAXException {
        try {
            return data.trim();
        } catch (IllegalArgumentException ex) {
            throw new SAXException("Not implemented yet.");
        }        
    }
    
    public int routerIdConvertor(final java.lang.String data) throws SAXException {
        try {
            return Integer.parseInt(data.trim());
        } catch (IllegalArgumentException ex) {
            throw new SAXException("routerIdConvertor(" + data.trim() + ")", ex);
        }
    }
    
    public java.lang.String managementDomainConvertor(final java.lang.String data) throws SAXException {
        try {
            return data.trim();
        } catch (IllegalArgumentException ex) {
            throw new SAXException("Not implemented yet.");
        }        
    }
    
    public int managementPortConvertor(final java.lang.String data) throws SAXException {
        try {
            return Integer.parseInt(data.trim());
        } catch (IllegalArgumentException ex) {
            throw new SAXException("managementPortConvertor(" + data.trim() + ")", ex);
        }
    }
    
    public java.lang.String hostConvertor(final java.lang.String data) throws SAXException {
        try {
            return data.trim();
        } catch (IllegalArgumentException ex) {
            throw new SAXException("Not implemented yet.");
        }        
    }
    
    public boolean networkConvertor(final java.lang.String data) throws SAXException {
        return "true".equals(data.trim());
    }
    
    public java.lang.String httpPasswordConvertor(final java.lang.String data) throws SAXException {
        try {
            return data.trim();
        } catch (IllegalArgumentException ex) {
            throw new SAXException("Not implemented yet.");
        }        
    }
    
    public int httpPortConvertor(final java.lang.String data) throws SAXException {
        try {
            return Integer.parseInt(data.trim());
        } catch (IllegalArgumentException ex) {
            throw new SAXException("httpPortConvertor(" + data.trim() + ")", ex);
        }
    }
    
    public int metricConvertor(final java.lang.String data) throws SAXException {
        try {
            return Integer.parseInt(data.trim());
        } catch (IllegalArgumentException ex) {
            throw new SAXException("metricConvertor(" + data.trim() + ")", ex);
        }
    }
    
    public java.lang.String messagingAgentConvertor(final java.lang.String data) throws SAXException {
        try {
            return data.trim();
        } catch (IllegalArgumentException ex) {
            throw new SAXException("Not implemented yet.");
        }
    }
    
    public boolean routerConvertor(final java.lang.String data) throws SAXException {
        return "true".equals(data.trim());
    }
    
    public java.lang.String addressElementConvertor(final java.lang.String data) throws SAXException {
        try {
            return data.trim();
        } catch (IllegalArgumentException ex) {
            throw new SAXException("Not implemented yet.");
        }
    }
    
    public int listenerPortConvertor(final java.lang.String data) throws SAXException {
        try {
            return Integer.parseInt(data.trim());
        } catch (IllegalArgumentException ex) {
            throw new SAXException("listenerPortConvertor(" + data.trim() + ")", ex);
        }
    }
    
    public boolean addressConvertor(final java.lang.String data) throws SAXException {
        return "true".equals(data.trim());
    }
    
    public boolean managementKeyConvertor(final java.lang.String data) throws SAXException {
        return "true".equals(data.trim());
    }
    
    public boolean destinationConvertor(final java.lang.String data) throws SAXException {
        return "true".equals(data.trim());
    }
    
    public int distanceConvertor(final java.lang.String data) throws SAXException {
        try {
            return Integer.parseInt(data.trim());
        } catch (IllegalArgumentException ex) {
            throw new SAXException("distanceConvertor(" + data.trim() + ")", ex);
        }
    }
    
    public boolean connectionConvertor(final java.lang.String data) throws SAXException {
        return "true".equals(data.trim());
    }
    
    public boolean interfaceConvertor(final java.lang.String data) throws SAXException {
        return "true".equals(data.trim());
    }
    
    public java.lang.String messagingDomainConvertor(final java.lang.String data) throws SAXException {
        try {
            return data.trim();
        } catch (IllegalArgumentException ex) {
            throw new SAXException("Not implemented yet.");
        }        
    }
    
    public boolean administrationConvertor(final java.lang.String data) throws SAXException {
        return "true".equals(data.trim());
    }
    
    public boolean sourceConvertor(final java.lang.String data) throws SAXException {
        return "true".equals(data.trim());
    }
    
    public java.lang.String httpUserConvertor(final java.lang.String data) throws SAXException {
        try {
            return data.trim();
        } catch (IllegalArgumentException ex) {
            throw new SAXException("Not implemented yet.");
        }        
    }
    
}

