# This is the default properties file for the MarketXS messaging library.
# The file should be saved under the name messaging.properties in the
# current working directory prior to starting the messaging application. All
# properties can be overridden using environment variables.
#
# Erik van Zijst - 22.oct.2003 - erik@marketxs.com


# Management Settings
#
# The MarketXS messaging library uses JMX for remote configuration and
# management. By default it runs the HTML adaptor and RMI adaptor.
#
com.marketxs.messaging.jmxUser = administrator
com.marketxs.messaging.jmxPass = secret
com.marketxs.messaging.jmxHtmlPort = 8083
com.marketxs.messaging.jmxRmiPort = 1103

# Kernel
#
# The kernel is the heart of the routing middleware. It has an address that
# is unique throughout the entire network and is configured using the
# routerAddress parameter below. This should always be configured. When this
# parameter is omitted, the implementation will use a random address
# containing 10 random digits, for example "unconfigured.2349857103". On
# small networks these will probably be unique however, remember the
# "birthday paradox"-effect in larger networks!
# The kernel implements the forwarding algorithm can be configured using the
# property MaxNodes. This is the maximum number of entries in the distance
# table that can be managed. 1000 is the default.
# The kernel transmits messages from the application asynchronously and can
# have a number of outstanding, buffered messages submitted by the user
# application, before the Transport.send() method starts blocking. This number
# is configured using the sendBuffer parameter.
#
#com.marketxs.messaging.Kernel.maxNodes = 1000
#com.marketxs.messaging.Kernel.sendBuffer = 1000
com.marketxs.messaging.Kernel.routerAddress = s1.b

# CostMetricUnit
#
# This unit determines the cost of the link between an interface and its
# peer. It does so by exchanging so-called ping messages. The unit sends a
# ping message every 5000 milliseconds by default. The unit determines the
# round-trip delay of each ping message and uses a moving average function
# with a period of 20 to flatten spikes in the ping results.
# Note that the interval is in milliseconds.
#
#com.marketxs.messaging.CostMetricUnit.pingInterval = 5000
#com.marketxs.messaging.CostMetricUnit.movingAverage = 20

# Interface Buffers
#
# Every (tcp)interface has both a socket reader and writer that deal with the
# actual data transfer. They both have a buffer or queue to store incoming or
# outgoing messages temporarily. Use these parameters to control the capacity
# of these buffers. Note that the capacity cannot be changed at runtime and
# applies to every interface. The default is capacity is 20.
# The discardFile parameters are the name of the files that can be used to
# store messages that were discarded due to a buffer overflow. When omitted,
# messages will not be stored. At runtime, the specified filenames will get
# the ID of the interface appended to them.
#
#com.marketxs.messaging.TCPInterface.readBufferCapacity = 20
#com.marketxs.messaging.TCPInterface.writeBufferCapacity = 20
#com.marketxs.messaging.SocketReader.discardFile = discarded-inbound-messages
#com.marketxs.messaging.SocketWriter.discardFile = discarded-outbound-messages

# MessagingConfigurator
#
# Below is a possible interface configuration that will be used
# automatically when the messaging library is first accessed. It defines two
# interfaces: if0 and if1. The first interface is configured
# to connect to host tr21.marketxs.com on port 5000 and the peer interface
# should have the address com.mxs.tr21. The link cost metric is computed by
# multiplying the real ping values by 2.5, this simulates a link that is 2.5
# times slower than it really is. The second interface connects to host
# tr25.marketxs.com on port 5000 and the peer interface should have the
# address com.mxs.tr25. Its cost metric is not manipulated. Note that the
# costMultiplier only affects the cost metric for this node, not that of the
# peer.
#
com.marketxs.messaging.interface.ids = if0, if1, if2, if3

com.marketxs.messaging.interface.if0.peerHost = localhost
com.marketxs.messaging.interface.if0.peerPort = 5002
com.marketxs.messaging.interface.if0.peerAddress = s1.a

com.marketxs.messaging.interface.if1.peerHost = localhost
com.marketxs.messaging.interface.if1.peerPort = 5006
com.marketxs.messaging.interface.if1.peerAddress = s2.c

com.marketxs.messaging.interface.if2.peerHost = localhost
com.marketxs.messaging.interface.if2.peerPort = 5004
com.marketxs.messaging.interface.if2.peerAddress = s2.a

com.marketxs.messaging.interface.if3.peerHost = localhost
com.marketxs.messaging.interface.if3.peerPort = 5001
com.marketxs.messaging.interface.if3.peerAddress = s1.c

# Listener
#
# The listener allows all interfaces to be reachable through the same TCP
# port. By default the listener binds to port 5000. When the listener can
# not bind to the specified port, its interfaces can setup connections to
# its neighbors, but is not reachable for neighbors that want to connect to
# it.
#
com.marketxs.messaging.TCPListener.port = 5003

# Connection Establishment
#
# Incoming connections from neighbor interfaces are initialized first before
# connecting them to the right internal interface. Only a limited number of
# simultaneous handshakes may be active at a time. Also, a handshake must
# complete within 10 seconds.
# Note that the timeout is in milliseconds.
#
#com.marketxs.messaging.TCPConnectionInitializer.timeout = 10000
#com.marketxs.messaging.TCPConnectionInitializer.maxConcurrent = 10
